// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/database"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/gateway/api"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/idempotency"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/message"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/proxy"
	"github.com/tkame123/ddd-sample/app/order_api/di/provider"
	"github.com/tkame123/ddd-sample/app/order_api/usecase"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeAPIServer() (connect.Server, func(), error) {
	envConfig, err := provider.NewENV()
	if err != nil {
		return connect.Server{}, nil, err
	}
	authConfig := provider.NewAuthConfig(envConfig)
	client, cleanup, err := provider.NewOrderApiDB(envConfig)
	if err != nil {
		return connect.Server{}, nil, err
	}
	repository := database.NewRepository(client)
	publisherConfig := provider.NewPublisherConfig(envConfig)
	config, err := provider.NewAWSConfig()
	if err != nil {
		cleanup()
		return connect.Server{}, nil, err
	}
	snsClient, err := provider.NewSNSClient(config)
	if err != nil {
		cleanup()
		return connect.Server{}, nil, err
	}
	publisher := message.NewEventPublisher(publisherConfig, snsClient)
	dynamodbClient, err := provider.NewDynamoClient(config)
	if err != nil {
		cleanup()
		return connect.Server{}, nil, err
	}
	idempotencyRepository := idempotency.NewRepository(dynamodbClient)
	enforcer, err := provider.NewCasbinEnforcer()
	if err != nil {
		cleanup()
		return connect.Server{}, nil, err
	}
	server := connect.NewServer(envConfig, authConfig, repository, publisher, idempotencyRepository, enforcer)
	return server, func() {
		cleanup()
	}, nil
}

func InitializeEventConsumer() (*message.EventConsumer, func(), error) {
	envConfig, err := provider.NewENV()
	if err != nil {
		return nil, nil, err
	}
	consumerConfig := provider.NewConsumerConfig(envConfig)
	config, err := provider.NewAWSConfig()
	if err != nil {
		return nil, nil, err
	}
	client, err := provider.NewSQSClient(config)
	if err != nil {
		return nil, nil, err
	}
	entClient, cleanup, err := provider.NewOrderApiDB(envConfig)
	if err != nil {
		return nil, nil, err
	}
	repository := database.NewRepository(entClient)
	publisherConfig := provider.NewPublisherConfig(envConfig)
	snsClient, err := provider.NewSNSClient(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	publisher := message.NewEventPublisher(publisherConfig, snsClient)
	orderService := usecase.NewOrderService(repository, publisher)
	kitchenAPI := proxy.NewKitchenAPI(repository, publisher)
	billingAPI := proxy.NewBillingAPI(publisher)
	eventConsumer := message.NewEventConsumer(consumerConfig, client, repository, orderService, kitchenAPI, billingAPI)
	return eventConsumer, func() {
		cleanup()
	}, nil
}

func InitializeCommandConsumer() (*message.CommandConsumer, func(), error) {
	envConfig, err := provider.NewENV()
	if err != nil {
		return nil, nil, err
	}
	consumerConfig := provider.NewConsumerConfig(envConfig)
	config, err := provider.NewAWSConfig()
	if err != nil {
		return nil, nil, err
	}
	client, err := provider.NewSQSClient(config)
	if err != nil {
		return nil, nil, err
	}
	entClient, cleanup, err := provider.NewOrderApiDB(envConfig)
	if err != nil {
		return nil, nil, err
	}
	repository := database.NewRepository(entClient)
	publisherConfig := provider.NewPublisherConfig(envConfig)
	snsClient, err := provider.NewSNSClient(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	publisher := message.NewEventPublisher(publisherConfig, snsClient)
	orderService := usecase.NewOrderService(repository, publisher)
	kitchenAPI := proxy.NewKitchenAPI(repository, publisher)
	billingAPI := proxy.NewBillingAPI(publisher)
	commandConsumer := message.NewCommandConsumer(consumerConfig, client, repository, orderService, kitchenAPI, billingAPI)
	return commandConsumer, func() {
		cleanup()
	}, nil
}

func InitializeReplyConsumer() (*message.ReplyConsumer, func(), error) {
	envConfig, err := provider.NewENV()
	if err != nil {
		return nil, nil, err
	}
	consumerConfig := provider.NewConsumerConfig(envConfig)
	config, err := provider.NewAWSConfig()
	if err != nil {
		return nil, nil, err
	}
	client, err := provider.NewSQSClient(config)
	if err != nil {
		return nil, nil, err
	}
	entClient, cleanup, err := provider.NewOrderApiDB(envConfig)
	if err != nil {
		return nil, nil, err
	}
	repository := database.NewRepository(entClient)
	publisherConfig := provider.NewPublisherConfig(envConfig)
	snsClient, err := provider.NewSNSClient(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	publisher := message.NewEventPublisher(publisherConfig, snsClient)
	orderService := usecase.NewOrderService(repository, publisher)
	kitchenAPI := proxy.NewKitchenAPI(repository, publisher)
	billingAPI := proxy.NewBillingAPI(publisher)
	replyConsumer := message.NewReplyConsumer(consumerConfig, client, repository, orderService, kitchenAPI, billingAPI)
	return replyConsumer, func() {
		cleanup()
	}, nil
}

// wire.go:

var providerServerSet = wire.NewSet(connect.NewServer, database.NewRepository, message.NewEventPublisher, idempotency.NewRepository, provider.NewENV, provider.NewAuthConfig, provider.NewCasbinEnforcer, provider.NewAWSConfig, provider.NewPublisherConfig, provider.NewOrderApiDB, provider.NewSNSClient, provider.NewDynamoClient)

var providerEventConsumerSet = wire.NewSet(message.NewEventConsumer, providerConsumerSet)

var providerCommandConsumerSet = wire.NewSet(message.NewCommandConsumer, providerConsumerSet)

var providerReplyConsumerSet = wire.NewSet(message.NewReplyConsumer, providerConsumerSet)

var providerConsumerSet = wire.NewSet(message.NewEventPublisher, database.NewRepository, usecase.NewOrderService, proxy.NewBillingAPI, proxy.NewKitchenAPI, provider.NewENV, provider.NewAWSConfig, provider.NewConsumerConfig, provider.NewPublisherConfig, provider.NewOrderApiDB, provider.NewSQSClient, provider.NewSNSClient)
