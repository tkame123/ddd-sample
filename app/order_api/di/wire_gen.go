// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/database"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/gateway/api"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/gateway/consumer"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/gateway/publisher"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/message/sns"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/proxy"
	"github.com/tkame123/ddd-sample/app/order_api/di/provider"
	"github.com/tkame123/ddd-sample/app/order_api/usecase/create_order"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeAPIServer() (connect.Server, func(), error) {
	envConfig, err := provider.NewENV()
	if err != nil {
		return connect.Server{}, nil, err
	}
	client, cleanup, err := provider.NewOrderApiDB(envConfig)
	if err != nil {
		return connect.Server{}, nil, err
	}
	repository := database.NewRepository(client)
	config, err := provider.NewAWSConfig()
	if err != nil {
		cleanup()
		return connect.Server{}, nil, err
	}
	snsClient, err := provider.NewSNSClient(config)
	if err != nil {
		cleanup()
		return connect.Server{}, nil, err
	}
	snsPublisher := sns.NewPublisher(snsClient)
	domain_eventPublisher := publisher.NewEventPublisher(envConfig, snsPublisher)
	server := connect.NewServer(repository, domain_eventPublisher)
	return server, func() {
		cleanup()
	}, nil
}

func InitializeEventConsumer() (*consumer.EventConsumer, func(), error) {
	envConfig, err := provider.NewENV()
	if err != nil {
		return nil, nil, err
	}
	config, err := provider.NewAWSConfig()
	if err != nil {
		return nil, nil, err
	}
	client, err := provider.NewSQSClient(config)
	if err != nil {
		return nil, nil, err
	}
	entClient, cleanup, err := provider.NewOrderApiDB(envConfig)
	if err != nil {
		return nil, nil, err
	}
	repository := database.NewRepository(entClient)
	snsClient, err := provider.NewSNSClient(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	snsPublisher := sns.NewPublisher(snsClient)
	domain_eventPublisher := publisher.NewEventPublisher(envConfig, snsPublisher)
	createOrder := create_order.NewService(repository, domain_eventPublisher)
	kitchenAPI := proxy.NewKitchenAPI()
	billingAPI := proxy.NewBillingAPI()
	eventConsumer := consumer.NewEventConsumer(envConfig, client, repository, createOrder, kitchenAPI, billingAPI)
	return eventConsumer, func() {
		cleanup()
	}, nil
}

// wire.go:

var providerServerSet = wire.NewSet(connect.NewServer, database.NewRepository, publisher.NewEventPublisher, sns.NewPublisher, provider.NewENV, provider.NewAWSConfig, provider.NewOrderApiDB, provider.NewSNSClient)

var providerEventConsumerSet = wire.NewSet(consumer.NewEventConsumer, publisher.NewEventPublisher, database.NewRepository, create_order.NewService, proxy.NewBillingAPI, proxy.NewKitchenAPI, sns.NewPublisher, provider.NewENV, provider.NewAWSConfig, provider.NewOrderApiDB, provider.NewSQSClient, provider.NewSNSClient)
