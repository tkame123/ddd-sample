// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tkame123/ddd-sample/app/order_api/domain/port/repository (interfaces: Repository,CreateOrderSagaState,Order)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/tkame123/ddd-sample/app/order_api/domain/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrderSagaStateFindOne mocks base method.
func (m *MockRepository) CreateOrderSagaStateFindOne(arg0 context.Context, arg1 uuid.UUID) (*model.CreateOrderSagaState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderSagaStateFindOne", arg0, arg1)
	ret0, _ := ret[0].(*model.CreateOrderSagaState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderSagaStateFindOne indicates an expected call of CreateOrderSagaStateFindOne.
func (mr *MockRepositoryMockRecorder) CreateOrderSagaStateFindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderSagaStateFindOne", reflect.TypeOf((*MockRepository)(nil).CreateOrderSagaStateFindOne), arg0, arg1)
}

// CreateOrderSagaStateSave mocks base method.
func (m *MockRepository) CreateOrderSagaStateSave(arg0 context.Context, arg1 *model.CreateOrderSagaState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderSagaStateSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderSagaStateSave indicates an expected call of CreateOrderSagaStateSave.
func (mr *MockRepositoryMockRecorder) CreateOrderSagaStateSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderSagaStateSave", reflect.TypeOf((*MockRepository)(nil).CreateOrderSagaStateSave), arg0, arg1)
}

// OrderFindOne mocks base method.
func (m *MockRepository) OrderFindOne(arg0 context.Context, arg1 uuid.UUID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderFindOne", arg0, arg1)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderFindOne indicates an expected call of OrderFindOne.
func (mr *MockRepositoryMockRecorder) OrderFindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderFindOne", reflect.TypeOf((*MockRepository)(nil).OrderFindOne), arg0, arg1)
}

// OrderSave mocks base method.
func (m *MockRepository) OrderSave(arg0 context.Context, arg1 *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderSave indicates an expected call of OrderSave.
func (mr *MockRepositoryMockRecorder) OrderSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderSave", reflect.TypeOf((*MockRepository)(nil).OrderSave), arg0, arg1)
}

// ProcessedMessageExists mocks base method.
func (m *MockRepository) ProcessedMessageExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessedMessageExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessedMessageExists indicates an expected call of ProcessedMessageExists.
func (mr *MockRepositoryMockRecorder) ProcessedMessageExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessedMessageExists", reflect.TypeOf((*MockRepository)(nil).ProcessedMessageExists), arg0, arg1)
}

// ProcessedMessageSave mocks base method.
func (m *MockRepository) ProcessedMessageSave(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessedMessageSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessedMessageSave indicates an expected call of ProcessedMessageSave.
func (mr *MockRepositoryMockRecorder) ProcessedMessageSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessedMessageSave", reflect.TypeOf((*MockRepository)(nil).ProcessedMessageSave), arg0, arg1)
}

// MockCreateOrderSagaState is a mock of CreateOrderSagaState interface.
type MockCreateOrderSagaState struct {
	ctrl     *gomock.Controller
	recorder *MockCreateOrderSagaStateMockRecorder
}

// MockCreateOrderSagaStateMockRecorder is the mock recorder for MockCreateOrderSagaState.
type MockCreateOrderSagaStateMockRecorder struct {
	mock *MockCreateOrderSagaState
}

// NewMockCreateOrderSagaState creates a new mock instance.
func NewMockCreateOrderSagaState(ctrl *gomock.Controller) *MockCreateOrderSagaState {
	mock := &MockCreateOrderSagaState{ctrl: ctrl}
	mock.recorder = &MockCreateOrderSagaStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateOrderSagaState) EXPECT() *MockCreateOrderSagaStateMockRecorder {
	return m.recorder
}

// CreateOrderSagaStateFindOne mocks base method.
func (m *MockCreateOrderSagaState) CreateOrderSagaStateFindOne(arg0 context.Context, arg1 uuid.UUID) (*model.CreateOrderSagaState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderSagaStateFindOne", arg0, arg1)
	ret0, _ := ret[0].(*model.CreateOrderSagaState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderSagaStateFindOne indicates an expected call of CreateOrderSagaStateFindOne.
func (mr *MockCreateOrderSagaStateMockRecorder) CreateOrderSagaStateFindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderSagaStateFindOne", reflect.TypeOf((*MockCreateOrderSagaState)(nil).CreateOrderSagaStateFindOne), arg0, arg1)
}

// CreateOrderSagaStateSave mocks base method.
func (m *MockCreateOrderSagaState) CreateOrderSagaStateSave(arg0 context.Context, arg1 *model.CreateOrderSagaState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderSagaStateSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderSagaStateSave indicates an expected call of CreateOrderSagaStateSave.
func (mr *MockCreateOrderSagaStateMockRecorder) CreateOrderSagaStateSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderSagaStateSave", reflect.TypeOf((*MockCreateOrderSagaState)(nil).CreateOrderSagaStateSave), arg0, arg1)
}

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// OrderFindOne mocks base method.
func (m *MockOrder) OrderFindOne(arg0 context.Context, arg1 uuid.UUID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderFindOne", arg0, arg1)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderFindOne indicates an expected call of OrderFindOne.
func (mr *MockOrderMockRecorder) OrderFindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderFindOne", reflect.TypeOf((*MockOrder)(nil).OrderFindOne), arg0, arg1)
}

// OrderSave mocks base method.
func (m *MockOrder) OrderSave(arg0 context.Context, arg1 *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderSave indicates an expected call of OrderSave.
func (mr *MockOrderMockRecorder) OrderSave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderSave", reflect.TypeOf((*MockOrder)(nil).OrderSave), arg0, arg1)
}
