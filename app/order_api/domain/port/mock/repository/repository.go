// Code generated by MockGen. DO NOT EDIT.
// Source: app/order_api/domain/port/repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tkame123/ddd-sample/app/order_api/domain/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrderSagaStateFindOne mocks base method.
func (m *MockRepository) CreateOrderSagaStateFindOne(ctx context.Context, id model.OrderID) (*model.CreateOrderSagaState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderSagaStateFindOne", ctx, id)
	ret0, _ := ret[0].(*model.CreateOrderSagaState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderSagaStateFindOne indicates an expected call of CreateOrderSagaStateFindOne.
func (mr *MockRepositoryMockRecorder) CreateOrderSagaStateFindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderSagaStateFindOne", reflect.TypeOf((*MockRepository)(nil).CreateOrderSagaStateFindOne), ctx, id)
}

// CreateOrderSagaStateSave mocks base method.
func (m *MockRepository) CreateOrderSagaStateSave(ctx context.Context, state *model.CreateOrderSagaState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderSagaStateSave", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderSagaStateSave indicates an expected call of CreateOrderSagaStateSave.
func (mr *MockRepositoryMockRecorder) CreateOrderSagaStateSave(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderSagaStateSave", reflect.TypeOf((*MockRepository)(nil).CreateOrderSagaStateSave), ctx, state)
}

// OrderFindOne mocks base method.
func (m *MockRepository) OrderFindOne(ctx context.Context, id model.OrderID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderFindOne", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderFindOne indicates an expected call of OrderFindOne.
func (mr *MockRepositoryMockRecorder) OrderFindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderFindOne", reflect.TypeOf((*MockRepository)(nil).OrderFindOne), ctx, id)
}

// OrderSave mocks base method.
func (m *MockRepository) OrderSave(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderSave", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderSave indicates an expected call of OrderSave.
func (mr *MockRepositoryMockRecorder) OrderSave(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderSave", reflect.TypeOf((*MockRepository)(nil).OrderSave), ctx, order)
}
