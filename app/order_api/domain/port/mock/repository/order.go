// Code generated by MockGen. DO NOT EDIT.
// Source: app/order_api/domain/port/repository/order.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tkame123/ddd-sample/app/order_api/domain/model"
)

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// OrderFindOne mocks base method.
func (m *MockOrder) OrderFindOne(ctx context.Context, id model.OrderID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderFindOne", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderFindOne indicates an expected call of OrderFindOne.
func (mr *MockOrderMockRecorder) OrderFindOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderFindOne", reflect.TypeOf((*MockOrder)(nil).OrderFindOne), ctx, id)
}

// OrderSave mocks base method.
func (m *MockOrder) OrderSave(ctx context.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderSave", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderSave indicates an expected call of OrderSave.
func (mr *MockOrderMockRecorder) OrderSave(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderSave", reflect.TypeOf((*MockOrder)(nil).OrderSave), ctx, order)
}
