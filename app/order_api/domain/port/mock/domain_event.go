// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tkame123/ddd-sample/app/order_api/domain/port/domain_event (interfaces: EventHandler,Publisher)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	message "github.com/tkame123/ddd-sample/proto/message"
)

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Handler mocks base method.
func (m *MockEventHandler) Handler(arg0 context.Context, arg1 *message.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockEventHandlerMockRecorder) Handler(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockEventHandler)(nil).Handler), arg0, arg1)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishMessages mocks base method.
func (m *MockPublisher) PublishMessages(arg0 context.Context, arg1 []*message.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishMessages", arg0, arg1)
}

// PublishMessages indicates an expected call of PublishMessages.
func (mr *MockPublisherMockRecorder) PublishMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMessages", reflect.TypeOf((*MockPublisher)(nil).PublishMessages), arg0, arg1)
}
