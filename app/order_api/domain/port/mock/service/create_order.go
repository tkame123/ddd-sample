// Code generated by MockGen. DO NOT EDIT.
// Source: app/order_api/domain/port/service/create_order.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/tkame123/ddd-sample/app/order_api/domain/port/service"
)

// MockCreateOrder is a mock of CreateOrder interface.
type MockCreateOrder struct {
	ctrl     *gomock.Controller
	recorder *MockCreateOrderMockRecorder
}

// MockCreateOrderMockRecorder is the mock recorder for MockCreateOrder.
type MockCreateOrderMockRecorder struct {
	mock *MockCreateOrder
}

// NewMockCreateOrder creates a new mock instance.
func NewMockCreateOrder(ctrl *gomock.Controller) *MockCreateOrder {
	mock := &MockCreateOrder{ctrl: ctrl}
	mock.recorder = &MockCreateOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateOrder) EXPECT() *MockCreateOrderMockRecorder {
	return m.recorder
}

// ApproveOrder mocks base method.
func (m *MockCreateOrder) ApproveOrder(ctx context.Context, input service.ApproveOrderInput) (*service.ApproveOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveOrder", ctx, input)
	ret0, _ := ret[0].(*service.ApproveOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveOrder indicates an expected call of ApproveOrder.
func (mr *MockCreateOrderMockRecorder) ApproveOrder(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveOrder", reflect.TypeOf((*MockCreateOrder)(nil).ApproveOrder), ctx, input)
}

// CreateOrder mocks base method.
func (m *MockCreateOrder) CreateOrder(ctx context.Context, input service.CreateOrderInput) (*service.CreateOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, input)
	ret0, _ := ret[0].(*service.CreateOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockCreateOrderMockRecorder) CreateOrder(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockCreateOrder)(nil).CreateOrder), ctx, input)
}

// RejectOrder mocks base method.
func (m *MockCreateOrder) RejectOrder(ctx context.Context, input service.RejectOrderInput) (*service.RejectOrderOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectOrder", ctx, input)
	ret0, _ := ret[0].(*service.RejectOrderOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectOrder indicates an expected call of RejectOrder.
func (mr *MockCreateOrderMockRecorder) RejectOrder(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectOrder", reflect.TypeOf((*MockCreateOrder)(nil).RejectOrder), ctx, input)
}
