// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tkame123/ddd-sample/app/order_api/domain/port/external_service (interfaces: BillingAPI,KitchenAPI)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockBillingAPI is a mock of BillingAPI interface.
type MockBillingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAPIMockRecorder
}

// MockBillingAPIMockRecorder is the mock recorder for MockBillingAPI.
type MockBillingAPIMockRecorder struct {
	mock *MockBillingAPI
}

// NewMockBillingAPI creates a new mock instance.
func NewMockBillingAPI(ctrl *gomock.Controller) *MockBillingAPI {
	mock := &MockBillingAPI{ctrl: ctrl}
	mock.recorder = &MockBillingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAPI) EXPECT() *MockBillingAPIMockRecorder {
	return m.recorder
}

// AuthorizeCard mocks base method.
func (m *MockBillingAPI) AuthorizeCard(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeCard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeCard indicates an expected call of AuthorizeCard.
func (mr *MockBillingAPIMockRecorder) AuthorizeCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeCard", reflect.TypeOf((*MockBillingAPI)(nil).AuthorizeCard), arg0, arg1)
}

// CancelCard mocks base method.
func (m *MockBillingAPI) CancelCard(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelCard", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelCard indicates an expected call of CancelCard.
func (mr *MockBillingAPIMockRecorder) CancelCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelCard", reflect.TypeOf((*MockBillingAPI)(nil).CancelCard), arg0, arg1)
}

// MockKitchenAPI is a mock of KitchenAPI interface.
type MockKitchenAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKitchenAPIMockRecorder
}

// MockKitchenAPIMockRecorder is the mock recorder for MockKitchenAPI.
type MockKitchenAPIMockRecorder struct {
	mock *MockKitchenAPI
}

// NewMockKitchenAPI creates a new mock instance.
func NewMockKitchenAPI(ctrl *gomock.Controller) *MockKitchenAPI {
	mock := &MockKitchenAPI{ctrl: ctrl}
	mock.recorder = &MockKitchenAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKitchenAPI) EXPECT() *MockKitchenAPIMockRecorder {
	return m.recorder
}

// ApproveTicket mocks base method.
func (m *MockKitchenAPI) ApproveTicket(arg0 context.Context, arg1 uuid.UUID, arg2 uuid.NullUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveTicket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveTicket indicates an expected call of ApproveTicket.
func (mr *MockKitchenAPIMockRecorder) ApproveTicket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveTicket", reflect.TypeOf((*MockKitchenAPI)(nil).ApproveTicket), arg0, arg1, arg2)
}

// CancelTicket mocks base method.
func (m *MockKitchenAPI) CancelTicket(arg0 context.Context, arg1 uuid.UUID, arg2 uuid.NullUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTicket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTicket indicates an expected call of CancelTicket.
func (mr *MockKitchenAPIMockRecorder) CancelTicket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTicket", reflect.TypeOf((*MockKitchenAPI)(nil).CancelTicket), arg0, arg1, arg2)
}

// CreateTicket mocks base method.
func (m *MockKitchenAPI) CreateTicket(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTicket", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockKitchenAPIMockRecorder) CreateTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockKitchenAPI)(nil).CreateTicket), arg0, arg1)
}

// RejectTicket mocks base method.
func (m *MockKitchenAPI) RejectTicket(arg0 context.Context, arg1 uuid.UUID, arg2 uuid.NullUUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectTicket", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectTicket indicates an expected call of RejectTicket.
func (mr *MockKitchenAPIMockRecorder) RejectTicket(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectTicket", reflect.TypeOf((*MockKitchenAPI)(nil).RejectTicket), arg0, arg1, arg2)
}
