// Code generated by MockGen. DO NOT EDIT.
// Source: app/order_api/domain/port/external_service/ticket_api.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tkame123/ddd-sample/app/order_api/domain/model"
)

// MockKitchenAPI is a mock of KitchenAPI interface.
type MockKitchenAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKitchenAPIMockRecorder
}

// MockKitchenAPIMockRecorder is the mock recorder for MockKitchenAPI.
type MockKitchenAPIMockRecorder struct {
	mock *MockKitchenAPI
}

// NewMockKitchenAPI creates a new mock instance.
func NewMockKitchenAPI(ctrl *gomock.Controller) *MockKitchenAPI {
	mock := &MockKitchenAPI{ctrl: ctrl}
	mock.recorder = &MockKitchenAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKitchenAPI) EXPECT() *MockKitchenAPIMockRecorder {
	return m.recorder
}

// ApproveTicket mocks base method.
func (m *MockKitchenAPI) ApproveTicket(ctx context.Context, orderID model.OrderID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApproveTicket", ctx, orderID)
}

// ApproveTicket indicates an expected call of ApproveTicket.
func (mr *MockKitchenAPIMockRecorder) ApproveTicket(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveTicket", reflect.TypeOf((*MockKitchenAPI)(nil).ApproveTicket), ctx, orderID)
}

// CreateTicket mocks base method.
func (m *MockKitchenAPI) CreateTicket(ctx context.Context, orderID model.OrderID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateTicket", ctx, orderID)
}

// CreateTicket indicates an expected call of CreateTicket.
func (mr *MockKitchenAPIMockRecorder) CreateTicket(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTicket", reflect.TypeOf((*MockKitchenAPI)(nil).CreateTicket), ctx, orderID)
}

// RejectTicket mocks base method.
func (m *MockKitchenAPI) RejectTicket(ctx context.Context, orderID model.OrderID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RejectTicket", ctx, orderID)
}

// RejectTicket indicates an expected call of RejectTicket.
func (mr *MockKitchenAPIMockRecorder) RejectTicket(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectTicket", reflect.TypeOf((*MockKitchenAPI)(nil).RejectTicket), ctx, orderID)
}
