// Code generated by MockGen. DO NOT EDIT.
// Source: app/order_api/domain/port/external_service/billing_api.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/tkame123/ddd-sample/app/kitchen_api/domain/model"
)

// MockBillingAPI is a mock of BillingAPI interface.
type MockBillingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAPIMockRecorder
}

// MockBillingAPIMockRecorder is the mock recorder for MockBillingAPI.
type MockBillingAPIMockRecorder struct {
	mock *MockBillingAPI
}

// NewMockBillingAPI creates a new mock instance.
func NewMockBillingAPI(ctrl *gomock.Controller) *MockBillingAPI {
	mock := &MockBillingAPI{ctrl: ctrl}
	mock.recorder = &MockBillingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAPI) EXPECT() *MockBillingAPIMockRecorder {
	return m.recorder
}

// AuthorizeCard mocks base method.
func (m *MockBillingAPI) AuthorizeCard(ctx context.Context, orderID model.OrderID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AuthorizeCard", ctx, orderID)
}

// AuthorizeCard indicates an expected call of AuthorizeCard.
func (mr *MockBillingAPIMockRecorder) AuthorizeCard(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeCard", reflect.TypeOf((*MockBillingAPI)(nil).AuthorizeCard), ctx, orderID)
}
