// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tkame123/ddd-sample/app/order_api/domain/port/service (interfaces: CreateOrder,CancelOrder)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/tkame123/ddd-sample/app/order_api/domain/model"
)

// MockCreateOrder is a mock of CreateOrder interface.
type MockCreateOrder struct {
	ctrl     *gomock.Controller
	recorder *MockCreateOrderMockRecorder
}

// MockCreateOrderMockRecorder is the mock recorder for MockCreateOrder.
type MockCreateOrderMockRecorder struct {
	mock *MockCreateOrder
}

// NewMockCreateOrder creates a new mock instance.
func NewMockCreateOrder(ctrl *gomock.Controller) *MockCreateOrder {
	mock := &MockCreateOrder{ctrl: ctrl}
	mock.recorder = &MockCreateOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateOrder) EXPECT() *MockCreateOrderMockRecorder {
	return m.recorder
}

// ApproveOrder mocks base method.
func (m *MockCreateOrder) ApproveOrder(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveOrder", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApproveOrder indicates an expected call of ApproveOrder.
func (mr *MockCreateOrderMockRecorder) ApproveOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveOrder", reflect.TypeOf((*MockCreateOrder)(nil).ApproveOrder), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockCreateOrder) CreateOrder(arg0 context.Context, arg1 []*model.OrderItemRequest) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockCreateOrderMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockCreateOrder)(nil).CreateOrder), arg0, arg1)
}

// RejectOrder mocks base method.
func (m *MockCreateOrder) RejectOrder(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectOrder", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectOrder indicates an expected call of RejectOrder.
func (mr *MockCreateOrderMockRecorder) RejectOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectOrder", reflect.TypeOf((*MockCreateOrder)(nil).RejectOrder), arg0, arg1)
}

// MockCancelOrder is a mock of CancelOrder interface.
type MockCancelOrder struct {
	ctrl     *gomock.Controller
	recorder *MockCancelOrderMockRecorder
}

// MockCancelOrderMockRecorder is the mock recorder for MockCancelOrder.
type MockCancelOrderMockRecorder struct {
	mock *MockCancelOrder
}

// NewMockCancelOrder creates a new mock instance.
func NewMockCancelOrder(ctrl *gomock.Controller) *MockCancelOrder {
	mock := &MockCancelOrder{ctrl: ctrl}
	mock.recorder = &MockCancelOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCancelOrder) EXPECT() *MockCancelOrderMockRecorder {
	return m.recorder
}

// CancelConfirmOrder mocks base method.
func (m *MockCancelOrder) CancelConfirmOrder(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelConfirmOrder", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelConfirmOrder indicates an expected call of CancelConfirmOrder.
func (mr *MockCancelOrderMockRecorder) CancelConfirmOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelConfirmOrder", reflect.TypeOf((*MockCancelOrder)(nil).CancelConfirmOrder), arg0, arg1)
}

// CancelOrder mocks base method.
func (m *MockCancelOrder) CancelOrder(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockCancelOrderMockRecorder) CancelOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockCancelOrder)(nil).CancelOrder), arg0, arg1)
}

// CancelRejectOrder mocks base method.
func (m *MockCancelOrder) CancelRejectOrder(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRejectOrder", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelRejectOrder indicates an expected call of CancelRejectOrder.
func (mr *MockCancelOrderMockRecorder) CancelRejectOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRejectOrder", reflect.TypeOf((*MockCancelOrder)(nil).CancelRejectOrder), arg0, arg1)
}
