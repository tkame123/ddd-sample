// Code generated by ent, DO NOT EDIT.

package createordersagastate

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the createordersagastate type in the database.
	Label = "create_order_saga_state"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCurrent holds the string denoting the current field in the database.
	FieldCurrent = "current"
	// Table holds the table name of the createordersagastate in the database.
	Table = "create_order_saga_states"
)

// Columns holds all SQL columns for createordersagastate fields.
var Columns = []string{
	FieldID,
	FieldCurrent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Current defines the type for the "current" enum field.
type Current string

// Current values.
const (
	CurrentApprovalPending Current = "ApprovalPending"
	CurrentCreatingTicket  Current = "CreatingTicket"
	CurrentAuthorizingCard Current = "AuthorizingCard"
	CurrentApprovingTicket Current = "ApprovingTicket"
	CurrentApprovingOrder  Current = "ApprovingOrder"
	CurrentOrderApproved   Current = "OrderApproved"
	CurrentRejectingTicket Current = "RejectingTicket"
	CurrentRejectingOrder  Current = "RejectingOrder"
	CurrentOrderRejected   Current = "OrderRejected"
)

func (c Current) String() string {
	return string(c)
}

// CurrentValidator is a validator for the "current" field enum values. It is called by the builders before save.
func CurrentValidator(c Current) error {
	switch c {
	case CurrentApprovalPending, CurrentCreatingTicket, CurrentAuthorizingCard, CurrentApprovingTicket, CurrentApprovingOrder, CurrentOrderApproved, CurrentRejectingTicket, CurrentRejectingOrder, CurrentOrderRejected:
		return nil
	default:
		return fmt.Errorf("createordersagastate: invalid enum value for current field: %q", c)
	}
}

// OrderOption defines the ordering options for the CreateOrderSagaState queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCurrent orders the results by the current field.
func ByCurrent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrent, opts...).ToFunc()
}
