// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/database/ent/processedmessage"
)

// ProcessedMessageCreate is the builder for creating a ProcessedMessage entity.
type ProcessedMessageCreate struct {
	config
	mutation *ProcessedMessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMessageID sets the "message_id" field.
func (pmc *ProcessedMessageCreate) SetMessageID(s string) *ProcessedMessageCreate {
	pmc.mutation.SetMessageID(s)
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *ProcessedMessageCreate) SetCreatedAt(t time.Time) *ProcessedMessageCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *ProcessedMessageCreate) SetNillableCreatedAt(t *time.Time) *ProcessedMessageCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// Mutation returns the ProcessedMessageMutation object of the builder.
func (pmc *ProcessedMessageCreate) Mutation() *ProcessedMessageMutation {
	return pmc.mutation
}

// Save creates the ProcessedMessage in the database.
func (pmc *ProcessedMessageCreate) Save(ctx context.Context) (*ProcessedMessage, error) {
	pmc.defaults()
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *ProcessedMessageCreate) SaveX(ctx context.Context) *ProcessedMessage {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *ProcessedMessageCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *ProcessedMessageCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *ProcessedMessageCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := processedmessage.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *ProcessedMessageCreate) check() error {
	if _, ok := pmc.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`ent: missing required field "ProcessedMessage.message_id"`)}
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ProcessedMessage.created_at"`)}
	}
	return nil
}

func (pmc *ProcessedMessageCreate) sqlSave(ctx context.Context) (*ProcessedMessage, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *ProcessedMessageCreate) createSpec() (*ProcessedMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcessedMessage{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(processedmessage.Table, sqlgraph.NewFieldSpec(processedmessage.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pmc.conflict
	if value, ok := pmc.mutation.MessageID(); ok {
		_spec.SetField(processedmessage.FieldMessageID, field.TypeString, value)
		_node.MessageID = value
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(processedmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProcessedMessage.Create().
//		SetMessageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcessedMessageUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (pmc *ProcessedMessageCreate) OnConflict(opts ...sql.ConflictOption) *ProcessedMessageUpsertOne {
	pmc.conflict = opts
	return &ProcessedMessageUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProcessedMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *ProcessedMessageCreate) OnConflictColumns(columns ...string) *ProcessedMessageUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &ProcessedMessageUpsertOne{
		create: pmc,
	}
}

type (
	// ProcessedMessageUpsertOne is the builder for "upsert"-ing
	//  one ProcessedMessage node.
	ProcessedMessageUpsertOne struct {
		create *ProcessedMessageCreate
	}

	// ProcessedMessageUpsert is the "OnConflict" setter.
	ProcessedMessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ProcessedMessageUpsert) SetCreatedAt(v time.Time) *ProcessedMessageUpsert {
	u.Set(processedmessage.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProcessedMessageUpsert) UpdateCreatedAt() *ProcessedMessageUpsert {
	u.SetExcluded(processedmessage.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ProcessedMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProcessedMessageUpsertOne) UpdateNewValues() *ProcessedMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.MessageID(); exists {
			s.SetIgnore(processedmessage.FieldMessageID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProcessedMessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProcessedMessageUpsertOne) Ignore() *ProcessedMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcessedMessageUpsertOne) DoNothing() *ProcessedMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcessedMessageCreate.OnConflict
// documentation for more info.
func (u *ProcessedMessageUpsertOne) Update(set func(*ProcessedMessageUpsert)) *ProcessedMessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcessedMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProcessedMessageUpsertOne) SetCreatedAt(v time.Time) *ProcessedMessageUpsertOne {
	return u.Update(func(s *ProcessedMessageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProcessedMessageUpsertOne) UpdateCreatedAt() *ProcessedMessageUpsertOne {
	return u.Update(func(s *ProcessedMessageUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ProcessedMessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcessedMessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcessedMessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProcessedMessageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProcessedMessageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProcessedMessageCreateBulk is the builder for creating many ProcessedMessage entities in bulk.
type ProcessedMessageCreateBulk struct {
	config
	err      error
	builders []*ProcessedMessageCreate
	conflict []sql.ConflictOption
}

// Save creates the ProcessedMessage entities in the database.
func (pmcb *ProcessedMessageCreateBulk) Save(ctx context.Context) ([]*ProcessedMessage, error) {
	if pmcb.err != nil {
		return nil, pmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*ProcessedMessage, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcessedMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *ProcessedMessageCreateBulk) SaveX(ctx context.Context) []*ProcessedMessage {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *ProcessedMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *ProcessedMessageCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ProcessedMessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProcessedMessageUpsert) {
//			SetMessageID(v+v).
//		}).
//		Exec(ctx)
func (pmcb *ProcessedMessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProcessedMessageUpsertBulk {
	pmcb.conflict = opts
	return &ProcessedMessageUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ProcessedMessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *ProcessedMessageCreateBulk) OnConflictColumns(columns ...string) *ProcessedMessageUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &ProcessedMessageUpsertBulk{
		create: pmcb,
	}
}

// ProcessedMessageUpsertBulk is the builder for "upsert"-ing
// a bulk of ProcessedMessage nodes.
type ProcessedMessageUpsertBulk struct {
	create *ProcessedMessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ProcessedMessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProcessedMessageUpsertBulk) UpdateNewValues() *ProcessedMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.MessageID(); exists {
				s.SetIgnore(processedmessage.FieldMessageID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ProcessedMessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProcessedMessageUpsertBulk) Ignore() *ProcessedMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProcessedMessageUpsertBulk) DoNothing() *ProcessedMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProcessedMessageCreateBulk.OnConflict
// documentation for more info.
func (u *ProcessedMessageUpsertBulk) Update(set func(*ProcessedMessageUpsert)) *ProcessedMessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProcessedMessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ProcessedMessageUpsertBulk) SetCreatedAt(v time.Time) *ProcessedMessageUpsertBulk {
	return u.Update(func(s *ProcessedMessageUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ProcessedMessageUpsertBulk) UpdateCreatedAt() *ProcessedMessageUpsertBulk {
	return u.Update(func(s *ProcessedMessageUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ProcessedMessageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProcessedMessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProcessedMessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProcessedMessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
