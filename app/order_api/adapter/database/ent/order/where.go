// Code generated by ent, DO NOT EDIT.

package order

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// ApprovalLimit applies equality check predicate on the "approvalLimit" field. It's identical to ApprovalLimitEQ.
func ApprovalLimit(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldApprovalLimit, v))
}

// ApprovalLimitEQ applies the EQ predicate on the "approvalLimit" field.
func ApprovalLimitEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldApprovalLimit, v))
}

// ApprovalLimitNEQ applies the NEQ predicate on the "approvalLimit" field.
func ApprovalLimitNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldApprovalLimit, v))
}

// ApprovalLimitIn applies the In predicate on the "approvalLimit" field.
func ApprovalLimitIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldApprovalLimit, vs...))
}

// ApprovalLimitNotIn applies the NotIn predicate on the "approvalLimit" field.
func ApprovalLimitNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldApprovalLimit, vs...))
}

// ApprovalLimitGT applies the GT predicate on the "approvalLimit" field.
func ApprovalLimitGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldApprovalLimit, v))
}

// ApprovalLimitGTE applies the GTE predicate on the "approvalLimit" field.
func ApprovalLimitGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldApprovalLimit, v))
}

// ApprovalLimitLT applies the LT predicate on the "approvalLimit" field.
func ApprovalLimitLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldApprovalLimit, v))
}

// ApprovalLimitLTE applies the LTE predicate on the "approvalLimit" field.
func ApprovalLimitLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldApprovalLimit, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// HasOrderItems applies the HasEdge predicate on the "orderItems" edge.
func HasOrderItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "orderItems" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
