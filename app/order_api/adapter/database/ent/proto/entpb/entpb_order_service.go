// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	ent "github.com/tkame123/ddd-sample/app/order_api/adapter/database/ent"
	order "github.com/tkame123/ddd-sample/app/order_api/adapter/database/ent/order"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// OrderService implements OrderServiceServer
type OrderService struct {
	client *ent.Client
	UnimplementedOrderServiceServer
}

// NewOrderService returns a new OrderService
func NewOrderService(client *ent.Client) *OrderService {
	return &OrderService{
		client: client,
	}
}

// toProtoOrder transforms the ent type to the pb type
func toProtoOrder(e *ent.Order) (*Order, error) {
	v := &Order{}
	approvalLimit := e.ApprovalLimit
	v.ApprovalLimit = approvalLimit
	id := int64(e.ID)
	v.Id = id
	return v, nil
}

// Get implements OrderServiceServer.Get
func (svc *OrderService) Get(ctx context.Context, req *GetOrderRequest) (*Order, error) {
	var (
		err error
		get *ent.Order
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetOrderRequest_VIEW_UNSPECIFIED, GetOrderRequest_BASIC:
		get, err = svc.client.Order.Get(ctx, id)
	case GetOrderRequest_WITH_EDGE_IDS:
		get, err = svc.client.Order.Query().
			Where(order.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoOrder(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
