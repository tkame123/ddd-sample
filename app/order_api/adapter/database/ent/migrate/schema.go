// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CreateOrderSagaStatesColumns holds the columns for the "create_order_saga_states" table.
	CreateOrderSagaStatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "current", Type: field.TypeEnum, Enums: []string{"ApprovalPending", "CreatingTicket", "AuthorizingCard", "ApprovingTicket", "ApprovingOrder", "OrderApproved", "RejectingTicket", "RejectingOrder", "OrderRejected"}},
		{Name: "ticket_id", Type: field.TypeUUID, Nullable: true},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// CreateOrderSagaStatesTable holds the schema information for the "create_order_saga_states" table.
	CreateOrderSagaStatesTable = &schema.Table{
		Name:       "create_order_saga_states",
		Columns:    CreateOrderSagaStatesColumns,
		PrimaryKey: []*schema.Column{CreateOrderSagaStatesColumns[0]},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Pending", "Approved", "Rejected"}},
		{Name: "version", Type: field.TypeInt64},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
	}
	// OrderItemsColumns holds the columns for the "order_items" table.
	OrderItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "sort_no", Type: field.TypeInt32},
		{Name: "item_id", Type: field.TypeUUID},
		{Name: "price", Type: field.TypeInt64, Default: 0},
		{Name: "quantity", Type: field.TypeInt32, Default: 0},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "order_id", Type: field.TypeUUID},
	}
	// OrderItemsTable holds the schema information for the "order_items" table.
	OrderItemsTable = &schema.Table{
		Name:       "order_items",
		Columns:    OrderItemsColumns,
		PrimaryKey: []*schema.Column{OrderItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_items_orders_orderItems",
				Columns:    []*schema.Column{OrderItemsColumns[7]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CreateOrderSagaStatesTable,
		OrdersTable,
		OrderItemsTable,
	}
)

func init() {
	OrderItemsTable.ForeignKeys[0].RefTable = OrdersTable
}
