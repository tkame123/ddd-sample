// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/database/ent/createordersagastate"
	"github.com/tkame123/ddd-sample/app/order_api/adapter/database/ent/predicate"
)

// CreateOrderSagaStateDelete is the builder for deleting a CreateOrderSagaState entity.
type CreateOrderSagaStateDelete struct {
	config
	hooks    []Hook
	mutation *CreateOrderSagaStateMutation
}

// Where appends a list predicates to the CreateOrderSagaStateDelete builder.
func (cossd *CreateOrderSagaStateDelete) Where(ps ...predicate.CreateOrderSagaState) *CreateOrderSagaStateDelete {
	cossd.mutation.Where(ps...)
	return cossd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cossd *CreateOrderSagaStateDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cossd.sqlExec, cossd.mutation, cossd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cossd *CreateOrderSagaStateDelete) ExecX(ctx context.Context) int {
	n, err := cossd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cossd *CreateOrderSagaStateDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(createordersagastate.Table, sqlgraph.NewFieldSpec(createordersagastate.FieldID, field.TypeUUID))
	if ps := cossd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cossd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cossd.mutation.done = true
	return affected, err
}

// CreateOrderSagaStateDeleteOne is the builder for deleting a single CreateOrderSagaState entity.
type CreateOrderSagaStateDeleteOne struct {
	cossd *CreateOrderSagaStateDelete
}

// Where appends a list predicates to the CreateOrderSagaStateDelete builder.
func (cossdo *CreateOrderSagaStateDeleteOne) Where(ps ...predicate.CreateOrderSagaState) *CreateOrderSagaStateDeleteOne {
	cossdo.cossd.mutation.Where(ps...)
	return cossdo
}

// Exec executes the deletion query.
func (cossdo *CreateOrderSagaStateDeleteOne) Exec(ctx context.Context) error {
	n, err := cossdo.cossd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{createordersagastate.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cossdo *CreateOrderSagaStateDeleteOne) ExecX(ctx context.Context) {
	if err := cossdo.Exec(ctx); err != nil {
		panic(err)
	}
}
